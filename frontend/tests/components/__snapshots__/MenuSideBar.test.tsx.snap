// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Project Folder Snapshot serverId 1`] = `
<MenuSideBar>
  <Styled(MuiBox)
    alignItems="center"
    className="makeStyles-background-1"
    display="flex"
    flexDirection="column"
    height="auto"
    justifyContent="flex-start"
    width="16vw"
  >
    <div
      className="MuiBox-root MuiBox-root-2 makeStyles-background-1"
    >
      <WithStyles(WithStyles(ForwardRef(Button)))
        disableRipple={true}
        onClick={[Function]}
        variant="contained"
      >
        <WithStyles(ForwardRef(Button))
          classes={
            Object {
              "root": "WithStyles(ForwardRef(Button))-root-3",
            }
          }
          disableRipple={true}
          onClick={[Function]}
          variant="contained"
        >
          <ForwardRef(Button)
            classes={
              Object {
                "colorInherit": "MuiButton-colorInherit",
                "contained": "MuiButton-contained",
                "containedPrimary": "MuiButton-containedPrimary",
                "containedSecondary": "MuiButton-containedSecondary",
                "containedSizeLarge": "MuiButton-containedSizeLarge",
                "containedSizeSmall": "MuiButton-containedSizeSmall",
                "disableElevation": "MuiButton-disableElevation",
                "disabled": "Mui-disabled",
                "endIcon": "MuiButton-endIcon",
                "focusVisible": "Mui-focusVisible",
                "fullWidth": "MuiButton-fullWidth",
                "iconSizeLarge": "MuiButton-iconSizeLarge",
                "iconSizeMedium": "MuiButton-iconSizeMedium",
                "iconSizeSmall": "MuiButton-iconSizeSmall",
                "label": "MuiButton-label",
                "outlined": "MuiButton-outlined",
                "outlinedPrimary": "MuiButton-outlinedPrimary",
                "outlinedSecondary": "MuiButton-outlinedSecondary",
                "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                "root": "MuiButton-root WithStyles(ForwardRef(Button))-root-3",
                "sizeLarge": "MuiButton-sizeLarge",
                "sizeSmall": "MuiButton-sizeSmall",
                "startIcon": "MuiButton-startIcon",
                "text": "MuiButton-text",
                "textPrimary": "MuiButton-textPrimary",
                "textSecondary": "MuiButton-textSecondary",
                "textSizeLarge": "MuiButton-textSizeLarge",
                "textSizeSmall": "MuiButton-textSizeSmall",
              }
            }
            disableRipple={true}
            onClick={[Function]}
            variant="contained"
          >
            <WithStyles(ForwardRef(ButtonBase))
              className="MuiButton-root WithStyles(ForwardRef(Button))-root-3 MuiButton-contained"
              component="button"
              disableRipple={true}
              disabled={false}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible"
              onClick={[Function]}
              type="button"
            >
              <ForwardRef(ButtonBase)
                className="MuiButton-root WithStyles(ForwardRef(Button))-root-3 MuiButton-contained"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                component="button"
                disableRipple={true}
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                onClick={[Function]}
                type="button"
              >
                <button
                  className="MuiButtonBase-root MuiButton-root WithStyles(ForwardRef(Button))-root-3 MuiButton-contained"
                  disabled={false}
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiButton-label"
                  >
                    Everyone
                  </span>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(Button)>
        </WithStyles(ForwardRef(Button))>
      </WithStyles(WithStyles(ForwardRef(Button)))>
    </div>
  </Styled(MuiBox)>
</MenuSideBar>
`;
